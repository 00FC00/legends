--lua script
--新开服活动通用处理

--#include "data\config\activityconfig\OpenServerActivity\OpenServerActivityConfig.txt" once		-- 配置文件
--#include "OpenServerActivityRank.txt" once

--玩家打开面板时进行的数据初始化判断
function ClientOpenInit(sysarg)
   local ActivityConfig = OpenServerActivityConfig.AllActivity
   --冲级 
   local MainNdx  = 1   
   local myLevel = Actor.getIntProperty(sysarg, PROP_CREATURE_LEVEL)
   local myCircle = Actor.getIntProperty(sysarg, PROP_ACTOR_CIRCLE)
   local  CountValue = myCircle*1000 + myLevel
   local nConfig = ActivityConfig[MainNdx]
   for i=1,table.getn(nConfig.Period) do
	   if CountValue >= (nConfig.Period[i].Circle*1000 + nConfig.Period[i].Level) then
          local Staus = GetActivityPeriodValue(sysarg, MainNdx, i) 
          --print("ClientOpenInit1:"..Staus) 
          if Staus == 0 then
             SetActivityPeriodValue(sysarg, MainNdx, i, 1)
          end
       end
   end
   --充值 
   MainNdx  = 2
   local drawYbCount = Actor.getIntProperty(sysarg, PROP_ACTOR_DRAW_YB_COUNT)
   local nConfig = ActivityConfig[MainNdx]
   for i=1,table.getn(nConfig.Period) do
	   if drawYbCount >= nConfig.Period[i].RechangNumber  then
          local Staus = GetActivityPeriodValue(sysarg, MainNdx, i)
          --print("ClientOpenInit2:"..Staus)
          if Staus == 0 then
             SetActivityPeriodValue(sysarg, MainNdx, i, 1)
          end
       end
   end  
   --元魄 
   local MainNdx  = 3
   local Level = Actor.getIntProperty(sysarg, PROP_ACTOR_YPGRADE)
   local Star = Actor.getIntProperty(sysarg, PROP_ACTOR_YPSTAR)
   local  CountValue = Level*1000 + Star
   local nConfig = ActivityConfig[MainNdx]
   for i=1,table.getn(nConfig.Period) do
	   if CountValue >= (nConfig.Period[i].Grade*1000 + nConfig.Period[i].Star) then
          local Staus = GetActivityPeriodValue(sysarg, MainNdx, i)
          --print("ClientOpenInit3:"..Staus)
          if Staus == 0 then
             SetActivityPeriodValue(sysarg, MainNdx, i, 1)
          end
       end
   end
   --坐骑
   MainNdx  = 4
   local RideLevel = Actor.getIntProperty(sysarg, PROP_ACTOR_RIDE_LEVEL)
   local nConfig = ActivityConfig[MainNdx]
   for i=1,table.getn(nConfig.Period) do
	   if RideLevel >= nConfig.Period[i].levelNumber  then
          local Staus = GetActivityPeriodValue(sysarg, MainNdx, i)
          --print("ClientOpenInit4:"..Staus)
          if Staus == 0 then
             SetActivityPeriodValue(sysarg, MainNdx, i, 1)
          end
       end
   end
   --翅膀
   local MainNdx  = 5
   local Level = Actor.getIntProperty(sysarg, PROP_ACTOR_WINGGRADE)
   local Star = Actor.getIntProperty(sysarg, PROP_ACTOR_WINGSTAR)
   local  CountValue = Level*1000 + Star
   local nConfig = ActivityConfig[MainNdx]
   for i=1,table.getn(nConfig.Period) do
	   if CountValue >= (nConfig.Period[i].Grade*1000 + nConfig.Period[i].Star) then
          local Staus = GetActivityPeriodValue(sysarg, MainNdx, i)
          --print("ClientOpenInit5:"..Staus)
          if Staus == 0 then
             SetActivityPeriodValue(sysarg, MainNdx, i, 1)
          end
       end
   end
   --魂玉
   MainNdx  = 6
   local DiamondPoint = Actor.getIntProperty(sysarg, PROP_ACTOR_DIAMOND_POINT)
   local nConfig = ActivityConfig[MainNdx]
   for i=1,table.getn(nConfig.Period) do
	   if DiamondPoint >= nConfig.Period[i].DiamondScore  then
          local Staus = GetActivityPeriodValue(sysarg, MainNdx, i)
          --print("ClientOpenInit6:"..Staus)
          if Staus == 0 then
             SetActivityPeriodValue(sysarg, MainNdx, i, 1)
          end
       end
   end 
   --血脉
   MainNdx  = 7
   local Level = Actor.getIntProperty(sysarg, PROP_ACTOR_XMGRADE)
   local Star = Actor.getIntProperty(sysarg, PROP_ACTOR_XMSTAR)
   local  CountValue = Level*1000 + Star
   local nConfig = ActivityConfig[MainNdx]
   for i=1,table.getn(nConfig.Period) do
	   if CountValue >= (nConfig.Period[i].Grade*1000 + nConfig.Period[i].Star) then
          local Staus = GetActivityPeriodValue(sysarg, MainNdx, i)
          --print("ClientOpenInit3:"..Staus)
          if Staus == 0 then
             SetActivityPeriodValue(sysarg, MainNdx, i, 1)
          end
       end
   end
end 

--获取名单中对应阶段的值
function GetActivityPeriodValue(sysarg, nMainIndex, AssistIndex)
  local nActorId = Actor.getIntProperty(sysarg, PROP_ENTITY_ID)
  local RankNameList = Ranking.getRanking(OpenServerActivityRankConfig[nMainIndex].RankName)
  if RankNameList then
     local pItem = Ranking.getItemPtrFromId(RankNameList,nActorId)
     if pItem == nil then
  		pItem = Ranking.addItem(RankNameList,nActorId,AssistIndex)
        for i = 1, #OpenServerActivityRankConfig[nMainIndex].RankColumn do
	  	    Ranking.setSub(pItem, i-1, "0")
        end
	    Ranking.setSub(pItem,0,Actor.getName(sysarg))
     end
     if pItem then
	    local Staus = tonumber(Ranking.getSub(pItem,AssistIndex))
	    return Staus
 	 end
  end
  return 0 
end  

--获取已达标人数
function GetOntoNumber(nMainIndex, AssistIndex)
  local pRanking = Ranking.getRanking(OpenServerActivityRankConfig[#OpenServerActivityRankConfig].RankName)
  if pRanking then
     local nItem = Ranking.getItemPtrFromId(pRanking,nMainIndex)
     if nItem == nil then
        nItem = Ranking.addItem(pRanking,nMainIndex,AssistIndex)
        for i = 1, #OpenServerActivityRankConfig[#OpenServerActivityRankConfig].RankColumn do
            --print("SetActivityPeriodValue:"..i)
	  	    Ranking.setSub(nItem, i-1, "0")
        end
     end
     if nItem then
		return tonumber(Ranking.getSub(nItem,AssistIndex-1))
     end
  end
  return 0
end 
--设置阶段奖励的值 
function SetActivityPeriodValue(sysarg, nMainIndex, AssistIndex, value)
  local nConfig = OpenServerActivityConfig.AllActivity[nMainIndex].Period[AssistIndex]
  local nActorId = Actor.getIntProperty(sysarg, PROP_ENTITY_ID)
  local pRanking = Ranking.getRanking(OpenServerActivityRankConfig[#OpenServerActivityRankConfig].RankName)
  if pRanking then
	 local ncount = 0
     local nItem = Ranking.getItemPtrFromId(pRanking,nMainIndex)
     if nItem == nil then
        nItem = Ranking.addItem(pRanking,nMainIndex,AssistIndex)
        for i = 1, #OpenServerActivityRankConfig[#OpenServerActivityRankConfig].RankColumn do
            --print("SetActivityPeriodValue:"..i)
	  	    Ranking.setSub(nItem, i-1, "0")
        end
     end 
     if nItem then    
		ncount = tonumber(Ranking.getSub(nItem,AssistIndex-1)) or 0
		--print("SetActivityPeriodValue:"..ncount)
		if ncount == nil then
		   ncount = 0
		end
		if ncount >= nConfig.LimitNumber then
		   if value == 1 then 
		      return
           end
		end
     end

     local RankNameList = Ranking.getRanking(OpenServerActivityRankConfig[nMainIndex].RankName)
     if RankNameList then
        local pItem = Ranking.getItemPtrFromId(RankNameList,nActorId)
        if pItem == nil then
  		   pItem = Ranking.addItem(RankNameList,nActorId,AssistIndex)
           for i = 1, #OpenServerActivityRankConfig[nMainIndex].RankColumn do
	  	       Ranking.setSub(pItem, i-1, "0")
           end
  		   Ranking.setSub(pItem,0,Actor.getName(sysarg))
        end
		if pItem then
		   Ranking.setItem(RankNameList,nActorId,AssistIndex)
		   Ranking.setSub(pItem,AssistIndex,tostring(value))		--0 没奖励  1 有奖励还没领取 2 已领取奖励
		   if value == 1 then
		      ncount = ncount + 1
		      Ranking.setSub(nItem,AssistIndex-1,ncount)
           end
		end
		Ranking.save(RankNameList, OpenServerActivityRankConfig[nMainIndex].RankFile)
     end
  end
end



--发送给客户端Ui面板奖励状态数据(单项活动状态)转换 
function SendClientUiData(sysarg, packet)
  local ndx = DataPack.readByte(packet)
  --print("ClientQuestOpenServe:"..ndx)
  ClientUiData(sysarg, ndx)
end

--发送给客户端Ui面板奖励状态数据(单项活动状态)
function ClientUiData(sysarg, ndx)
  local ActivityConfig = OpenServerActivityConfig.AllActivity[ndx].Period
  if not ActivityConfig then return end
  local npack = DataPack.allocPacket(sysarg,145, 117)
  DataPack.writeByte(npack, 3*(#ActivityConfig))
  for i = 1, #ActivityConfig do
      local Ret = GetActivityPeriodValue(sysarg, ndx, i)
      local Total = GetOntoNumber(ndx, i)
  	  DataPack.writeUInt(npack,Total)
	  DataPack.writeByte(npack,1)
	  DataPack.writeByte(npack,Ret)
	  --print("SendClientUiData:"..Ret.."Total:"..Total.."ActivityConfig:"..(ActivityConfig[i].LimitNumber))
  end
  DataPack.writeByte(npack,ndx)
  DataPack.flush(npack)
end

--客户端请求领取奖励
function ClientAskOpenServerAward(sysarg, packet) 
  --print("ClientAskOpenServerAward")
  local nMainIndex = DataPack.readByte(packet)
  local AssistIndex = DataPack.readByte(packet)
  local Ret = GetActivityPeriodValue(sysarg, nMainIndex, AssistIndex)
  if Ret == 0 then
     Actor.sendTipmsg(sysarg, Lang.Activity.OpenServerActivity002, ttFlyTip)
     return
  end
  if Ret == 2 then
     Actor.sendTipmsg(sysarg, Lang.Activity.OpenServerActivity001, ttFlyTip)
     return
  end
  local Tb = OpenServerActivityConfig.AllActivity[nMainIndex].Period[AssistIndex].awards
  local totalGrid = 0
  for i = 1, #Tb do
  	  if Tb[i] ~= nil then
		 if Tb[i].type == 0 then
			totalGrid = totalGrid + Item.getAddItemNeedGridCount(sysarg,Tb[i].id,Tb[i].count,Tb[i].quality,Tb[i].strong,Tb[i].bind)
		 end
      end
  end
  --判断能否获取物品，因为有背包满的情况
  local x = totalGrid - Item.getBagEmptyGridCount(sysarg)
  if x > 0 then
     Actor.sendTipmsg(sysarg,string.format(Lang.ScriptTips.f00059, x) ,ttDialog)
     return
  end
  SetActivityPeriodValue(sysarg, nMainIndex, AssistIndex, 2)
  for i = 1, #Tb do 
      Actor.giveAward(sysarg,Tb[i].type, Tb[i].id, Tb[i].count, Tb[i].quality, Tb[i].strong, Tb[i].bind,0,996,Lang.Activity.OpenServerActivity004, -1)
  end
  Actor.sendTipmsg(sysarg, Lang.Activity.OpenServerActivity003, ttFlyTip)
  local Tbs = OpenServerActivityConfig.AllActivity[nMainIndex].PeriodName
  --print("ClientAskOpenServerAward:"..Tbs) 
  --print("ClientAskOpenServerAward:"..AssistIndex)
  System.broadcastTipmsg(string.format(Lang.Activity.OpenServerActivity005, Actor.getName(sysarg), Tbs, AssistIndex), ttScreenCenter + ttChatWindow)
  ClientUiData(sysarg, nMainIndex)
end