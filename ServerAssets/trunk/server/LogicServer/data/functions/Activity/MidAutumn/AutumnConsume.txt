
--lua script
--#include "data\config\activityconfig\MidAutumn\MidAutumnAct.txt" once 
--#include "data\config\activityconfig\MidAutumn\AutumnConsumeConfig.txt" once  
--#include "data\functions\Activity\Common\Awards.txt" once
--#include "MidAutumnLogin.txt" once
--#include "data\functions\Systems\AnniversarySystem\RechargeRankCommon.txt" once
--#include "data\functions\Activity\MidAutumn\Recharge.txt" once --充值返利
--#include "data\functions\Activity\MidAutumn\ChangeRunMoon.txt" once --嫦娥奔月

--中秋消费排行

--中秋消费统计
function OnAutumnConsume(sysarg, nYuanBao)
	local AutumnConsummeTime = {}
	for i = 1, table.getn(MidAutumnActConfig.actTime) do
		table.insert(AutumnConsummeTime, MidAutumnActConfig.actTime[i])
		if i == 9 then
			AutumnConsummeTime[i] = AutumnConsummeTime[i] - 1
		end
	end
	
	if System.isInDateRange(unpack(AutumnConsummeTime)) ~= true then
		return
	end

	local actorId = Actor.getIntProperty(sysarg, PROP_ENTITY_ID)
	local actorName = Actor.getName(sysarg)
	local AutumnConsumePtr = Ranking.getRanking(Lang.Rank.AutumnConsumeFile)
	if AutumnConsumePtr then
		local consumeItemPtr = Ranking.getItemPtrFromId(AutumnConsumePtr, actorId)
		if not consumeItemPtr then
			consumeItemPtr = Ranking.addItem(AutumnConsumePtr, actorId, nYuanBao)
			if consumeItemPtr then
				Ranking.setSub(consumeItemPtr, 0, actorName)
			end
		else
			Ranking.updateItem(AutumnConsumePtr, actorId, nYuanBao)
		end
	end
	
	local AutumnAccConsumePtr = Ranking.getRanking(Lang.Rank.AutumnAccConsumeFile)
	if AutumnAccConsumePtr then
		local consumeItemPtr = Ranking.getItemPtrFromId( AutumnAccConsumePtr, actorId)
		if not consumeItemPtr then
			consumeItemPtr = Ranking.addItem(AutumnAccConsumePtr, actorId, nYuanBao)
			if consumeItemPtr then
				Ranking.setSub(consumeItemPtr, 0, actorName)
			end
		else
			Ranking.updateItem(AutumnAccConsumePtr, actorId, nYuanBao)
		end
	end

end

--零点发奖励, nType 1为今日奖励，2为累计奖励;  needClear是否需要清除
function OnGiveAutumnAward(nType, needClear)
	if nType ~= 1 and nType ~= 2 then
		return 
	end	
	
	local consumeIdTab, consumeNameTab = GetBeforeTen(nType)
	
	local title = ""
	if nType == 1 then
		title = AutumnConsumeConfig.dayAwards.awardTips
	else
		title = AutumnConsumeConfig.accAwards.awardTips
	end
	
	for i = 1, table.getn(consumeIdTab) do 
		local awardIdx, needBagCount = GetAutumnConsumeAwardIdx(nType, i)

		if awardIdx > 0 then
			local str = string.format(title, i)
			System.addOfflineMsg(consumeIdTab[i], 63, str, 0, nType ,awardIdx, needBagCount)
		end
	end
	
	if needClear == true then
		local rankPtr = nil
		if nType == 1 then
			rankPtr = Ranking.getRanking(Lang.Rank.AutumnConsumeFile)
		else
			rankPtr = Ranking.getRanking(Lang.Rank.AutumnAccConsumeFile)
		end
		
		if rankPtr then
			Ranking.clearRanking(rankPtr)
		end
	end

end

--领取奖励
function OnGetAutumnConsumeAward(sysarg, args)
	local nType = args[2]
	local nAwardIdx = args[3]
	local nNeedBagCount = args[4]
	
	if nType ~= 1 and nType ~= 2 then
		return 
	end
	
	local awards = {} 
	local logTip = ""
	if nType == 1 then
		awards = AutumnConsumeConfig.dayAwards
		logTip = Lang.LogTips.mzg100
	else
		awards = AutumnConsumeConfig.accAwards
		logTip = Lang.LogTips.mzg101
	end
	
	if nAwardIdx > 0 and nAwardIdx <= table.getn(awards) then
		local awardList = awards[nAwardIdx].awardList
		local ret = Awards.CheckBagGridCount(sysarg, awardList) 
		if ret == true then
			Awards.Give(sysarg, awardList, 970, logTip)
		end
	end

end

--客户端请求消费排行信息
function ReqAutumnConsume(sysarg, packet)
	if System.isInDateRange(unpack(MidAutumnActConfig.actTime)) ~= true then
		return
	end
	
	local nType = DataPack.readByte(packet)
	if nType ~= 1 and nType ~= 2 then
		return 
	end
	
	local consumeIdTab, consumeNameTab = GetBeforeTen(nType)

	local actorId = Actor.getIntProperty(sysarg, PROP_ENTITY_ID)
	local myRank = 0
	for i = 1, table.getn(consumeIdTab) do 
		if actorId == consumeIdTab[i] then
			myRank = i 
			break
		end
	end
	local myPoint = GetMyAutumnConsume(actorId, nType)
	
	local pack = DataPack.allocPacket(sysarg, 145, 70)
	if not pack then
		return 
	end
	
	DataPack.writeByte(pack, nType)
	DataPack.writeByte(pack, myRank)
	DataPack.writeInt(pack, myPoint)
	DataPack.writeByte(pack, table.getn(consumeNameTab))
	
	for i = 1, table.getn(consumeNameTab) do 
		DataPack.writeString(pack, consumeNameTab[i])
	end
	
	DataPack.flush(pack)
	
end

--获取前面10名，nType 1为今日奖励，2为累计奖励
function GetBeforeTen(nType)
	local resultIdTab = {}
	local resultNameTab = {}
	local rankPtr = nil
	local rankConsume = 0
	if nType == 1 then
		rankPtr = Ranking.getRanking(Lang.Rank.AutumnConsumeFile)
		rankConsume = AutumnConsumeConfig.dayConsume
	else
		rankPtr = Ranking.getRanking(Lang.Rank.AutumnAccConsumeFile) 
		rankConsume = AutumnConsumeConfig.accConsume
	end
	
	if rankPtr then
		local itemCount = Ranking.getRankItemCount(rankPtr)
		if itemCount > 10 then
			itemCount = 10
		end
	
		for i = 1, itemCount do 
			local itemPtr = Ranking.getItemPtrByIndex(rankPtr, i-1)
			if itemPtr then
				local id = Ranking.getId(itemPtr)
				local point = Ranking.getPoint(itemPtr)
				local name = Ranking.getSub(itemPtr, 0)
				if point >= rankConsume then
					table.insert(resultIdTab, id)
					table.insert(resultNameTab, name)
				end
			end
		end
	end
	
	return resultIdTab, resultNameTab

end

--获取自己的消费
function GetMyAutumnConsume(actorId, nType)
	local rankPtr = nil
	local myPoint = 0
	if nType == 1 then
		rankPtr = Ranking.getRanking(Lang.Rank.AutumnConsumeFile)
	else
		rankPtr = Ranking.getRanking(Lang.Rank.AutumnAccConsumeFile) 
	end
	
	if rankPtr then
		local itemPtr = Ranking.getItemPtrFromId(rankPtr, actorId)
		if itemPtr then
			myPoint = Ranking.getPoint(itemPtr)
		end
	end
	
	return myPoint
	
end

--获取奖励序号
function GetAutumnConsumeAwardIdx(nType, rankIdx)
	local awardIdx = 0
	local needBagCount = 0
	local awards = nil
	
	if nType == 1 then
		awards = AutumnConsumeConfig.dayAwards
	else
		awards = AutumnConsumeConfig.accAwards 
	end
	
	if awards then
		for k, v in ipairs(awards.awardIndexs or {}) do
			if rankIdx >= v.beginVal and  rankIdx <= v.endVal then
				awardIdx = k
				break
			end
		end
	end
	
	local needBagCount = 0
	if rankIdx > 0 and rankIdx <= table.getn(awards) then
		needBagCount = awards[rankIdx].needBagCount
	end
	
	return awardIdx, needBagCount
	
end


--中秋节零点处理
function OnAutumnZeroHandle()
	local nYear, nMonth, nDay = System.getDate(0, 0, 0)
	if MidAutumnActConfig.actTime[7] == nYear and  MidAutumnActConfig.actTime[8] == nMonth and MidAutumnActConfig.actTime[9] == nDay then
		OnGiveAutumnAward(1, false)  --当日消费奖励
		OnGiveAutumnAward(2, false)  --累计消费奖励
	else
		OnGiveAutumnAward(1, true)  --当日消费奖励
	end
	
	ClearValChangERunMoon() --嫦娥奔月活动每天兑换次数0点清零
	
	ResetLuckDrawData(4) --重置羊年元宵老虎机   
end

--清除活动数据
function OnClearAutumnEndHandle()
	CloseRechargeCommon(11)

	local ranking = Ranking.getRanking(MidAutumnRankPt.LoginRankPt.File)
	if ranking then
		Ranking.clearRanking(ranking)
	end
	
	
	local AutumnConsumePtr = Ranking.getRanking( Lang.Rank.AutumnConsumeFile )	--清除消费数据	
	if AutumnConsumePtr then
		Ranking.clearRanking(AutumnConsumePtr)
	end
	local AutumnAccConsumePtr = Ranking.getRanking( Lang.Rank.AutumnAccConsumeFile )		
	if AutumnAccConsumePtr then
		Ranking.clearRanking(AutumnAccConsumePtr)
	end
	
	local FlopCardllParamPtr = Ranking.getRanking( Lang.Rank.FlopCardllParamFile )	--清除翻牌数据	
	if FlopCardllParamPtr then
		Ranking.clearRanking(FlopCardllParamPtr)
	end
	local FlopCardInfoPtr = Ranking.getRanking( Lang.Rank.FlopCardInfoFile )		
	if FlopCardInfoPtr then
		Ranking.clearRanking(FlopCardInfoPtr)
	end
	
	SendMailRechargeAward() --充值返利活动结束后发送未领取的奖励
	
	--清除羊年老虎机数据
	ClearLuckDrawData(4) 
	
end


--清除活动数据
function ClearMidAutumnData()
	ClearValChangERunMoon() --嫦娥奔月活动次数清零
	ClearRechargeCommonActivityRank(11)

	local ranking = Ranking.getRanking(MidAutumnRankPt.LoginRankPt.File)
	if ranking then
		Ranking.clearRanking(ranking)
	end
	
	
	local AutumnConsumePtr = Ranking.getRanking( Lang.Rank.AutumnConsumeFile )	--清除消费数据	
	if AutumnConsumePtr then
		Ranking.clearRanking(AutumnConsumePtr)
	end
	local AutumnAccConsumePtr = Ranking.getRanking( Lang.Rank.AutumnAccConsumeFile )		
	if AutumnAccConsumePtr then
		Ranking.clearRanking(AutumnAccConsumePtr)
	end
	
	local FlopCardllParamPtr = Ranking.getRanking( Lang.Rank.FlopCardllParamFile )	--清除翻牌数据	
	if FlopCardllParamPtr then
		Ranking.clearRanking(FlopCardllParamPtr)
	end
	local FlopCardInfoPtr = Ranking.getRanking( Lang.Rank.FlopCardInfoFile )		
	if FlopCardInfoPtr then
		Ranking.clearRanking(FlopCardInfoPtr)
	end
	
	local AutumnRechargePtr = Ranking.getRanking(Lang.Rank.AutumnRechargeFile)
	if AutumnRechargePtr then
		Ranking.clearRanking(AutumnRechargePtr)
	end
	
	--清除羊年老虎机数据
	ClearLuckDrawData(4) 
	
end