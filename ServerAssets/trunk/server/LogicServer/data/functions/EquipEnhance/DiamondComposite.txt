--lua script
--宝石合成


--玩家开始合成, args = {物品指针数量,[指针1],[指针2],..物品处理类型,[参数1]，[参数2],...}
function OnDiamondComposite( sysarg, args )
	local ptrCount = args[1]			--指针数量
	local opType = args[ptrCount+2]		--操作类型
	local nItemId = args[ptrCount+3]		--选择合成物品ID
	local isRepCost = args[ptrCount+4] or 0	--是否元宝替代
	
	
	if not nItemId then return false end
	
	--local nGrade, nType = GetDiamondLevelAndType(nItemId)
	
	local consumeConfig = enhanceConfigMap[opType]
	--[[
	local config = consumeConfig[nGrade]
	
	if (config == nil) then
		System.trace("OnDiamondComposite error can't find config, grade="..nGrade)
		return false
	end
	
	local config = config[nType]
	--]]
	local config = GetDiamondCompositeConfig(consumeConfig, nItemId)
	if (config == nil) then
		--System.trace("OnDiamondComposite error can't find config, nType="..nType)
		Actor.sendTipmsg(sysarg, Lang.ScriptTips.mep005, ttFlyTip)
		return false
	end
	
	local award = config.awards[1]
	if award.type ~= 0 or award.id <= 0 or nItemId ~= award.id then
		System.trace("OnDiamondComposite awards error！, nItemId="..nItemId)
		return 
	end
	
	if Awards.CheckBagGridCount(sysarg, config.awards) ~= true then return end
	if Item.getBagEmptyGridCount(sysarg) < 1 then
		Actor.sendTipmsg(sysarg, Lang.ScriptTips.f00027, ttFlyTip)
		return
	end
	
	-- local dynamic_consum_items = 
	-- {
		-- other_dy_items = {}, 
		-- luckitems = {},
	-- }
	
	-- local result = SuccessCheck(sysarg, args, config, dynamic_consum_items, isRepCost)
	
	local result = SuccessCheck(sysarg, opType, config.consumes, isRepCost)
	
	
	if (result ~= successCheckResult.ok) then return false end
	
	local logstr = string.format(Lang.LogTips.l00109)
	--local result, isBind = EnhanceConsume( sysarg, args, config, dynamic_consum_items, opType, isRepCost, logstr)
	local result, isBind = EnhanceConsumes(sysarg, opType, config.consumes, isRepCost, 0, 0, logstr)
	if (result ~= successCheckResult.ok) then 
		System.trace("EnhanceConsumes error, result = %d"..result)
		return false 
	end
	
	
	local quality = award.quality or 0
	local strong = award.strong or 0
	--给玩家添加一个装备 
	if Actor.addItem(sysarg, award.id, quality, strong, 1, isBind, 0, Lang.LogTips.l00082, 171) < 1 then
		System.trace(string.format("add Item error, id = %d, actorid=%d, isBind=%d", award.id, Actor.getIntProperty(sysarg,PROP_ENTITY_ID), isBind))
		return false
	end
	--[[
	local newItemPtr = Item.createItem(award.id, 1, quality, strong, isBind, 0)
	if not newItemPtr then
		System.trace("createItem error, id = "..award.id)
		return false
	end
	
	
	if (Item.addItem(sysarg, newItemPtr, Lang.LogTips.l00082, 171, 1) ~= 1) then
		System.trace("add Item error, id = "..award.id)
		return false
	end
	--]]
	
	--返回客户端处理结果
	Item.sendItemProcessResult( sysarg, nil, opType, false)
	Actor.triggerQuestEvent(sysarg, 127, 50101, 1 )
	return true
end

--获取合成的消耗,args = {物品指针数量,[指针1],[指针2],..物品处理类型,[参数1]，[参数2],...}
function GetDiamondCompositeConsumes(sysarg, args)
	local ptrCount = args[1]			--指针数量
	local opType = args[ptrCount+2]		--操作类型
	local nItemId = args[ptrCount+3]		--选择合成物品ID
	
	if not nItemId then return false end
	
	--local nGrade, nType = GetDiamondLevelAndType(nItemId)
	
	local consumeConfig = enhanceConfigMap[opType]
	--[[
	local config = consumeConfig[nGrade]
	
	if (config == nil) then
		System.trace("GetDiamondCompositeConsumes error can't find config, grade="..nGrade)
		return false
	end
	
	local config = config[nType]
	--]]
	local config = GetDiamondCompositeConfig(consumeConfig, nItemId)
	if (config == nil) then
		--System.trace("GetDiamondCompositeConsumes error can't find config, nType="..nType)
		
		return false
	end
	
	local award = config.awards[1]
	if award.type ~= 0 or award.id <= 0 or nItemId ~= award.id then
		System.trace("GetDiamondCompositeConsumes awards error！, nItemId="..nItemId)
		return 
	end
	--[[
	local consumes = {}
	for k, v in ipairs(config.consumes) do
		if v.type == 6 then
			table.insert(consumes, v)
			break
		end
	end
	--]]
	SendConsumesToClient(sysarg, opType, config.consumes)
	
end

function GetDiamondCompositeConfig(config, nItemId)
	for k, v in ipairs(config) do
		for m, n in ipairs(v) do
			if n.awards[1].id == nItemId then
				return n
			end
		end
	end
	return nil
	
end