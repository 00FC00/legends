--lua script
--物品增强功能通用功能接口
--#include "data\language\LangCode.txt" once
--#include "data\functions\GlobalDefine.txt" once

--#include "data\functions\Activity\Common\Awards.txt" once	--奖励通用

--配置文件
--#include "data\config\item\itemEnhance\CommonConfig.txt" once 	--通用配置
----#include "data\config\item\itemEnhance\WingComposite.txt" once 	--翅膀合成
----#include "data\config\item\itemEnhance\CircleForge.txt" once 		--转生装备锻造
----#include "data\config\item\ItemBreak\ItemBreak.txt" once 			--装备分解
--#include "data\config\item\ItemComposite\ItemComposite.txt" once	--物品合成
--#include "data\config\item\itemEnhance\DiamondComposite.txt" once --宝石合成
--#include "data\config\item\itemEnhance\DiamondChg.txt" once 		--宝石转换
----#include "data\config\item\itemEnhance\WeaponExtendChg.txt" once 	--幻武转移
----#include "data\config\item\itemEnhance\FootPrintChg.txt" once 	--足迹继承
--#include "data\config\item\itemEnhance\MoveStrong.txt" once 		--强化转移
----#include "data\config\item\itemEnhance\MoveAuthenticate.txt" once --鉴定转移
----#include "data\config\item\itemEnhance\FootPrintUpgradeQuality.txt" once --足迹提品
--#include "data\config\item\itemEnhance\WuLingSmelt.txt" once --武灵灵石熔炼 



--#include "QuestConfig.txt" once --任务

--装备操作类型
itEquipUpgrade = 1			--装备升级
itEquipStrong = 2			--装备强化
itEquipAuthenticate = 3		--装备鉴定
itEquipClearProp = 4		--装备清洗
itEquipWingComposite = 5	--翅膀合成
itEquipCircleForge = 6		--转生装备锻造
itEquipBreak = 7			--装备分解
itItemComposite = 8			--物品合成
itDiamondComposite = 9		--宝石合成
itDiamondComposite = 10		--宝石转换
itMoveInitAttr = 11			--极品属性转移
itClearInitAttr = 12		--清洗极品属性
itWeaponExtendChg = 13		--武器扩展 幻武转移
itMagicItemComposite = 14	--法宝合成
itMagicItemChg = 15			--法宝幻化
itCircleUpgrade = 16		--转生装备升级
itWeaponExtendStrong = 17	--武器扩展 幻武启灵
itEquipFeatherStrong = 18	--翅膀羽化
itFootPrintUpgrade = 19		--足迹升阶
itFootPrintChg = 20			--足迹继承
itMoveStrong = 21			--强化转移
itMoveAuthProp = 22			--鉴定转移
itFootPrintUpgradeQuality = 23 --足迹提品
itSealUpgrade = 24			--玉玺升阶
itFootPrintStrong = 25		--足迹强化
itSpecialRingComposite = 26 --特戒融合
itSealStrong = 27			--玉玺强化
itWuLingSmelt = 28          --武灵灵石熔炼 

--增强配置概括表
enhanceConfigMap = {
	{},
	{},
	{},
	{},
	WingComposite,		--翅膀合成
	CircleForge,		--转生装备锻造
	ItemBreakConfig,	--装备分解
	ItemComposite,		--道具合成
	DiamondComposite,	--宝石合成
	DiamondChg,			--宝石转换
	{},
	{},
	WeaponExtendChg,	--幻武转移
	{},
	{},
	{},
	{},
	{},
	{},
	FootPrintChg,
	{},
	{},
	{},
}

--提示配置 
--配置为nil时可以根据返回的可行性检查返回结果进行提示
tipsMap = {
	moneyLack = {	--金钱不足
		Lang.ScriptTips.zf061,	
		Lang.ScriptTips.zf065,	
		nil,
		nil,
		Lang.ScriptTips.zf061,
		Lang.ScriptTips.zf070,
		nil,
		Lang.ScriptTips.zf061,
		Lang.ScriptTips.zf061,
		Lang.ScriptTips.zf061,
		Lang.ScriptTips.zf061,
		Lang.ScriptTips.zf061,
		Lang.ScriptTips.zf061,
		Lang.ScriptTips.zf061,
		Lang.ScriptTips.zf061,
		nil,
		nil,
		nil,
		nil,
		Lang.ScriptTips.zf061,
		Lang.ScriptTips.zf061,
		Lang.ScriptTips.zf061,
		nil,
	},
	itemLack = {	--物品不足
		Lang.ScriptTips.zf062,
		nil,
		nil,
		nil,
		Lang.ScriptTips.zf062,
		Lang.ScriptTips.zf071,
		nil,
		Lang.ScriptTips.zf062,
		Lang.ScriptTips.zf062,
		Lang.ScriptTips.zf062,
		Lang.ScriptTips.zf062,
		Lang.ScriptTips.zf062,
		Lang.ScriptTips.zf062,
		Lang.ScriptTips.zf062,
		Lang.ScriptTips.zf062,
		nil,
		nil,
		nil,
		nil,
		Lang.ScriptTips.zf062,
		Lang.ScriptTips.zf062,
		Lang.ScriptTips.zf062,
		nil,
	},
	ybLack = {		--元宝不足
		Lang.ScriptTips.zf063,
		nil,
		nil,
		nil,
		Lang.ScriptTips.zf063,
		Lang.ScriptTips.zf072,
		nil,
		Lang.ScriptTips.zf063,
		Lang.ScriptTips.zf063,
		Lang.ScriptTips.zf063,
		Lang.ScriptTips.zf063,
		Lang.ScriptTips.zf063,
		Lang.ScriptTips.zf063,
		Lang.ScriptTips.zf063,
		Lang.ScriptTips.zf063,
		nil,
		nil,
		nil,
		nil,
		Lang.ScriptTips.zf063,
		Lang.ScriptTips.zf063,
		Lang.ScriptTips.zf063,
		nil,
	},
}



--记录日志用的消费金钱logid 
TypeMoneyLogid = {
	[1] = nil,
	[2] = nil,
	[3] = nil, 
	[4] = nil,
	[5] = 161,
	[6] = 127,
	[7] = nil,
	[8] = 127,
	[9] = 171,
	[10] = 319,
	[11] = 319,
	[12] = nil,
	[13] = nil,
	[14] = 127,
	[15] = 319,
	[16] = nil,
	[17] = nil,
	[18] = nil,
	[19] = nil,
	[20] = nil,
	[21] = nil,
	[22] = nil,
	[23] = nil,
}
--记录日志用的消耗物品logid 
TypeItemLogid = {
	[1] = nil,
	[2] = nil,
	[3] = nil,
	[4] = nil,
	[5] = 87,
	[6] = 33,
	[7] = nil,
	[8] = 74,
	[9] = 171,
	[10] = 319,
	[11] = 319,
	[12] = nil,
	[13] = nil,
	[14] = 319,
	[15] = 319,
	[16] = nil,
	[17] = nil,
	[18] = nil,
	[19] = nil,
	[20] = nil,
	[21] = nil,
	[22] = nil,
	[23] = nil,
	
}

--记录日志用的消耗元宝logid 
TypeYuanBaoLogid = {
	[1] = nil,
	[2] = nil,
	[3] = nil,
	[4] = nil,
	[5] = 162,
	[6] = 162,
	[7] = nil,
	[8] = 162,
	[9] = 171,
	[10] = 319,
	[11] = 319,
	[12] = nil,
	[13] = nil,
	[14] = 319,
	[15] = 319,
	[16] = nil,
	[17] = nil,
	[18] = nil,
	[19] = nil,
	[20] = nil,
	[21] = nil,
	[22] = nil,
	[23] = nil,
}

--可行性检查返回结果表
successCheckResult = {
	ok = 1,
	moneyLack = 2,
	itemLack = 3,
	oddOut = 4,
	otherLack = 5,
	ybLack = 6,	
}

--检测所有消耗
--tbConsumes: 消耗配置表
--[[
	consumes = 	--消耗要求物品
	{
		--usetype:消耗类型(0普通消耗 1保护消耗)  yb:元宝替换数(去掉此值代表此项消耗不能使用元宝替代)  param:可以用于物品指针
		{type, id, count, quality = 0, strong = 0, usetype = 0, yb = 10, param = 0}, 
		{type = 6, id = 0, count = 100, usetype = 0}
	},
--]]
--opType: 操作类型
--isRepCost: 是否选择使用元宝替代 0不使用 否则使用
--isProtect: 是否使用保护材料 0不使用 否则使用
--bIncEquipBar: 是否删除装备物品
function SuccessCheck(sysarg, opType, tbConsumes, isRepCost, isProtect, bIncEquipBar)
	local isRepCost = isRepCost or 0	--是否选择使用元宝替代 0不使用 否则使用
	local isProtect = isProtect or 0	--是否使用保护材料 0不使用 否则使用
	local bIncEquipBar = bIncEquipBar or false
	local resultType = successCheckResult.otherLack	--返回结果类型
	if not tbConsumes then return resultType end
	
	local repYbCount = 0	--元宝替代数目
	--检测消耗
	for k, v in pairs(tbConsumes) do
		local bRepFlag = false		--是否有替代标志
		local quality = v.quality or 0
		local strong = v.strong or 0
		local bind = v.bind or -1
		local param = v.param or nil
		local usetype = v.usetype or 0
		local duraOdds = v.duraOdds or -1
		local bIncEquip = v.incEquip or bIncEquipBar
		local yb = v.yb or 0
	    --print("SuccessCheck:"..(v.type))	
		--如果是保护物品
		if v.usetype ~= 1 or isProtect ~= 0 then
			--如果是元宝则加到替代元宝里
			if v.type == 15 then	
				repYbCount = repYbCount + v.count
			end
			
			local guid = 0
			if v.type == 0 and type(param) ~= 'number' and param ~= nil then
				v.id = Item.getItemProperty( sysarg, param, Item.ipItemID, -1 )
			end
			local bCheck = false
			if v.id > 0 and v.type == 0 then
				local hasCount = Actor.getItemCount(sysarg, v.id, quality, strong, bind, duraOdds, nil, bIncEquip)

				if hasCount >= v.count then
					bCheck = true
				end
			else
				bCheck = Actor.checkConsume(sysarg, v.type, v.id, v.count, quality, strong, bind, guid) 
			end
			
			--检测失败
			if bCheck ~= true then
				local tips = ""
				if v.type == 0 then		--消耗物品处理
					if v.yb and v.yb > 0 and isRepCost ~= 0 then	--进行特别处理(元宝替代消耗)
						local itemId = v.id
						if type(param) ~= 'number' and param ~= nil then
							itemId = Item.getItemProperty(sysarg, param, Item.ipItemID, -1 )
						end
						local hasItemCount = Actor.getItemCount(sysarg, itemId, quality, strong, bind, duraOdds, nil, bIncEquip)
						
						if v.count > hasItemCount then
							repYbCount = repYbCount + (v.count - hasItemCount)*v.yb
							bRepFlag = true
							tips = nil
						end
					else
						resultType = successCheckResult.itemLack	--道具不足提示
						tips = tips..Item.getAwardDesc(v.type, v.id, false, param)
						tips = tips..tipsMap.itemLack[opType]
					end
				end
				if v.type == 5 then
					resultType = successCheckResult.moneyLack	--绑定金币不足不足提示
					tips = tipsMap.moneyLack[2]
				end
				if v.type == 6 then
					resultType = successCheckResult.moneyLack	--金币不足提示
					tips = tipsMap.moneyLack[opType]
				end
				if v.type == 15 then
					resultType = successCheckResult.ybLack		--元宝不足提示
					tips = tipsMap.ybLack[opType]
				end
				if tips ~= nil then
					if tips == "" then
						local name = Item.getAwardDesc(v.type, v.id, false, param)
						if v.type ~= 0 then
							tips = string.format(Lang.ScriptTips.mt00002, name, v.count)
						elseif (v.id > 0) then
							tips = string.format(Lang.ScriptTips.mt00003, name, v.count)
						end
					end
					Actor.sendTipmsg(sysarg, tips, ttFlyTip)
				end
				if bRepFlag ~= true then
					return resultType
				end
			end
		end
	end
	
	--替代元宝检测
	if repYbCount > 0 then
		local bCheck = Actor.checkConsume(sysarg, 15, 0, repYbCount)
		if bCheck ~= true then
			resultType = successCheckResult.ybLack		--元宝不足提示
			tips = string.format(Lang.ScriptTips.zf064, repYbCount)
			Actor.sendTipmsg(sysarg, tips, ttFlyTip)
			return resultType
		end
	end
	
	return successCheckResult.ok
end

--处理所有消耗
--tbConsumes: 消耗配置表
--[[
	consumes = 	--消耗要求物品
	{
		--usetype:消耗类型(0普通消耗 1保护消耗)  yb:元宝替换数(去掉此值代表此项消耗不能使用元宝替代)  param:可以用于物品指针
		{type, id, count, quality = 0, strong = 0, usetype = 0, yb = 10, param = 0}, 
		{type = 6, id = 0, count = 100, usetype = 0}
	},
--]]
--opType: 操作类型
--isRepCost: 是否选择使用元宝替代 0不使用 否则使用
--isProtect: 是否使用保护材料 0不使用 否则使用
--nLogId: 日志ID
--sLogStr: 日志描述
--bIncEquipBar: 是否删除装备物品
function EnhanceConsumes(sysarg, opType, tbConsumes, isRepCost, isProtect, nLogId, sLogStr, bIncEquipBar)
	
	local isRepCost = isRepCost or 0	--是否选择使用元宝替代 0不使用 否则使用
	local isProtect = isProtect or 0	--是否使用保护材料 0不使用 否则使用
	local nLogId = nLogId or 0
	local sLogStr = sLogStr or Lang.LogTips.yb033
	local bIncEquipBar = bIncEquipBar or false
	--日志ID
	local itemLogId = TypeItemLogid[opType] or 2
	local moneyLogId = TypeMoneyLogid[opType] or 101
	local yuanbaoLogId = TypeYuanBaoLogid[opType] or 162

	local resultType = successCheckResult.otherLack	--返回结果类型
	local bindFlag = 0
	if not tbConsumes then return resultType, bindFlag end
	
	local repYbCount = 0	--元宝替代数目
	--检测消耗
	for k, v in pairs(tbConsumes) do
		
		local isBind = 0
		local bRepFlag = false		--是否有替代标志
		local quality = v.quality or 0
		local strong = v.strong or 0
		local bind = v.bind or -1
		local param = v.param or nil
		local usetype = v.usetype or 0
		local duraOdds = v.duraOdds or -1
		local bIncEquip = v.incEquip or bIncEquipBar
		local yb = v.yb or 0
		
		--如果是保护物品
		if (v.usetype ~= 1 or isProtect ~= 0) then
			--如果是元宝则加到替代元宝里(消耗的元宝与替代的元宝分开扣除)
			-- if v.type == 15 then	
				-- repYbCount = repYbCount + v.count
			-- end
			local bCheck = false
			local logId = nLogId
			if v.type == 0 then
				local itemId = v.id
				if type(param) ~= 'number' and param ~= nil then
					itemId = Item.getItemProperty(sysarg, param, Item.ipItemID, -1)
				end
				if logId <= 0 then
					logId = itemLogId
				end
				local consumeCount = v.count
				bCheck, isBind = RemoveItemBindFirst(sysarg, itemId, consumeCount, quality, strong, logId, sLogStr, duraOdds, bIncEquip)
				
				if bCheck ~= true and v.yb and v.yb > 0 and isRepCost ~= 0 then	--进行特别处理(元宝替代消耗)
					local hasItemCount = Actor.getItemCount(sysarg, itemId, quality, strong, -1, duraOdds, nil, bIncEquip)
					
					if v.count > hasItemCount then
						repYbCount = repYbCount + (v.count - hasItemCount)*v.yb
						bRepFlag = true
						consumeCount = hasItemCount
					end
					if bRepFlag == true then
						bCheck, isBind = RemoveItemBindFirst(sysarg, itemId, consumeCount, quality, strong, logId, sLogStr, duraOdds, bIncEquip)
						
					end
				end
			else
				if logId <= 0 then
					logId = moneyLogId
				end
				local param = param or 0
				if Actor.removeConsume(sysarg, v.type, v.id, v.count, quality, strong, bind, param, logId, sLogStr) >= v.count then
					bCheck = true
				end
			end
			
			--扣除失败
			if bCheck ~= true then
				local tips = ""
				if v.type == 0 then		--消耗物品处理
					resultType = successCheckResult.itemLack	--道具不足提示
					tips = tipsMap.itemLack[opType]
				end
				if v.type == 6 then
					resultType = successCheckResult.moneyLack	--金币不足提示
					tips = tipsMap.moneyLack[opType]
				end
				if v.type == 15 then
					resultType = successCheckResult.ybLack		--元宝不足提示
					tips = tipsMap.ybLack[opType]
				end
				if tips ~= nil then
					if tips == "" then
						local name = Item.getAwardDesc(v.type, v.id, true, param)
						if v.type ~= 0 then
							tips = string.format(Lang.ScriptTips.mt00002, name, v.count)
						elseif (v.id > 0) then
							tips = string.format(Lang.ScriptTips.mt00003, name, v.count)
						end
					end
					Actor.sendTipmsg(sysarg, tips, ttFlyTip)
				end
				return resultType, isBind
			end
		end
		if isBind ~= 0 then
			bindFlag = 1
		end
	end
	
	--替代元宝检测
	if repYbCount > 0 then
		if nLogId <= 0 then
			nLogId = yuanbaoLogId
		end
		if Actor.removeConsume(sysarg, 15, 0, repYbCount, 0, 0, 0, 0, nLogId, sLogStr) < repYbCount then
			resultType = successCheckResult.ybLack		--元宝不足提示
			tips = Lang.ScriptTips.zf064
			Actor.sendTipmsg(sysarg, tips, ttFlyTip)
			return resultType, bindFlag
		end
	end
	
	return successCheckResult.ok, bindFlag
end



--删除物品，优先删除绑定的，如果绑定的不够就删除非绑定的，如果有绑定的消耗了就返回true
--param sysarg:玩家的指针
--param c_itemID:物品的指针
--param amount:删除的数量
--param  nQuality: 品质 
--param  nStrong: 强化 
--param  nLogId: 日志ID
--param  sLogStr: 日志描述
--param  duraOdds: 耐力差 = 最大耐力-当前耐力 -1表示不检测 检测少于此耐力差的物品符合条件
--ret: suc:表示是否删除成功，isBind:如果成功表示是否删除了绑定物品 返回绑定状态 0没有删除过绑定物品 1删除过绑定物品
function RemoveItemBindFirst(sysarg, c_itemID, amount, nQuality, nStrong, nLogId, sLogStr, duraOdds, bIncEquipBar)
	local isBind = 1; --是否是绑定的物品
	--绑定的优先，如果有绑定的返回绑定状态
	local itemname = Item.getItemName(c_itemID)
	local nQuality = nQuality or 0
	local nStrong = nStrong or 0
	local duraOdds = duraOdds or -1
	local bindCount   = Actor.getItemCount(sysarg,c_itemID,nQuality,nStrong,1,duraOdds, nil, bIncEquipBar);  --绑定的数量
	local noBindCount = Actor.getItemCount(sysarg,c_itemID,nQuality,nStrong,0,duraOdds, nil, bIncEquipBar);  --不绑定的数量

	if (amount <= 0) then return true, 0 end
	
	if (amount > bindCount + noBindCount) then  --物品不够
		return false, 0;
	else 
		if (bindCount >= amount) then --如果绑定物品数量够的话，就消耗绑定物品
			--如果是绑定的话，那么就是绑定的
			if (Actor.removeItem( sysarg, c_itemID, amount, nQuality, nStrong, 1, sLogStr, nLogId,duraOdds, bIncEquipBar) ~= amount ) then
				return false, 0;  --失败了
			else
				isBind = 1;
			end 
		else 
			if(noBindCount >= amount)  then --非绑定的足够，那么就生成非绑定的，结果也是非绑定的
				if ( Actor.removeItem( sysarg, c_itemID, amount,nQuality,nStrong,0,sLogStr,nLogId,duraOdds, bIncEquipBar) ~=  amount ) then
					return false, 0;  --失败了
				else
				    isBind = 0;
				end 
			else  --有绑定的和非绑定的，优先消耗绑定的，结果是绑定的,并且结果是绑定的
				local tocalConsumeCount =0;
				tocalConsumeCount = Actor.removeItem( sysarg, c_itemID, bindCount,nQuality,nStrong,1,sLogStr,nLogId,duraOdds, bIncEquipBar) 
				if (tocalConsumeCount ~= bindCount)  then
					return false, 1
				end
				tocalConsumeCount = tocalConsumeCount + Actor.removeItem( sysarg, c_itemID, amount- bindCount,nQuality,nStrong,0,sLogStr,nLogId,duraOdds,bIncEquipBar) 
				if (tocalConsumeCount < amount)  then
					return false, 1;
				else
					isBind = 1; -- 是绑定的
				end
			end
		end
	end
	return true, isBind;
end

--获取宝石 DiamondLevelConfig表的等级 与类型ID
function GetDiamondLevelAndType(itemid, level)
	local config = DiamondLevelConfig
	if not config then return 0, 0 end
	local level = tonumber(level) or 0
	if level <= 0 or level > table.getn(config) then
		for k, v in ipairs(config) do
			for m, n in ipairs(v) do
				if n == itemid then
					level = k
					typeid = m
				end
			end
		end
	else
		for k, v in ipairs(config[level]) do
			if v == itemid then
				typeid = k
			end
		end
	end
	
	return level, typeid
end

function CheckConsumesItemBind(sysarg, opType, tbConsumes, isRepCost, isProtect, nLogId, sLogStr)
	local isRepCost = isRepCost or 0	--是否选择使用元宝替代 0不使用 否则使用
	local isProtect = isProtect or 0	--是否使用保护材料 0不使用 否则使用
	local nLogId = nLogId or 0
	local sLogStr = sLogStr or Lang.LogTips.yb032
	
	--日志ID
	local itemLogId = TypeItemLogid[opType] or 2
	local moneyLogId = TypeMoneyLogid[opType] or 101
	local yuanbaoLogId = TypeYuanBaoLogid[opType] or 162

	local resultType = successCheckResult.otherLack	--返回结果类型
	local bindFlag = 0
	if not tbConsumes then return resultType, bindFlag end
	
	local repYbCount = 0	--元宝替代数目
	--检测消耗
	for k, v in pairs(tbConsumes) do
		local isBind = 1
		local bRepFlag = false		--是否有替代标志
		local quality = v.quality or 0
		local strong = v.strong or 0
		local bind = v.bind or -1
		local param = v.param or nil
		local usetype = v.usetype or 0
		local duraOdds = v.duraOdds or -1
		local yb = v.yb or 0
		
		--如果是保护物品
		if (v.usetype ~= 1 or isProtect ~= 0) then
			--如果是元宝则加到替代元宝里(消耗的元宝与替代的元宝分开扣除)
			-- if v.type == 15 then	
				-- repYbCount = repYbCount + v.count
			-- end
			local bCheck = false
			local logId = nLogId
			if v.type == 0 then
				local itemId = v.id
				if type(param) ~= 'number' and param ~= nil then
					itemId = Item.getItemProperty(sysarg, param, Item.ipItemID, -1)
				end
				if logId <= 0 then
					logId = itemLogId
				end
				local consumeCount = v.count
				bCheck, isBind = CheckItemBind(sysarg, itemId, consumeCount, quality, strong, logId, sLogStr, duraOdds)
				if bCheck ~= true and v.yb and v.yb > 0 and isRepCost ~= 0 then	--进行特别处理(元宝替代消耗)
					local hasItemCount = Actor.getItemCount(sysarg, itemId, quality, strong, -1, duraOdds)
					if v.count > hasItemCount then
						repYbCount = repYbCount + (v.count - hasItemCount)*v.yb
						bRepFlag = true
						consumeCount = hasItemCount
					end
					if bRepFlag == true then
						bCheck, isBind = CheckItemBind(sysarg, itemId, consumeCount, quality, strong, logId, sLogStr, duraOdds)
					end
				end
			end
		end
		if isBind ~= 0 then
			bindFlag = 1
		end
	end
	
	return successCheckResult.ok, bindFlag
end

function CheckItemBind(sysarg, c_itemID, amount, nQuality, nStrong, nLogId, sLogStr, duraOdds)
	local isBind = 1; --是否是绑定的物品
	--绑定的优先，如果有绑定的返回绑定状态
	local itemname = Item.getItemName(c_itemID)
	local nQuality = nQuality or 0
	local nStrong = nStrong or 0
	local duraOdds = duraOdds or -1
	local bindCount   = Actor.getItemCount(sysarg,c_itemID,nQuality,nStrong,1,duraOdds);  --绑定的数量
	local noBindCount = Actor.getItemCount(sysarg,c_itemID,nQuality,nStrong,0,duraOdds);  --不绑定的数量
	if (amount <= 0) then return true, 0 end
	
	if (amount > bindCount + noBindCount) then  --物品不够
		return false, 0;
	else 
		if (bindCount >= amount) then --如果绑定物品数量够的话，就消耗绑定物品
			--如果是绑定的话，那么就是绑定的
			isBind = 1
		else 
			if(noBindCount >= amount)  then --非绑定的足够，那么就生成非绑定的，结果也是非绑定的
				isBind = 0
			else  --有绑定的和非绑定的，优先消耗绑定的，结果是绑定的,并且结果是绑定的
				isBind = 1
			end
		end
	end
	return true, isBind;
end

--返回客户端请求消耗
--eqtype:操作类型
--消耗表
--[[
consumes = 
{
	{type = 0, id = 0, count = 0},	--{type:类型，0是银两，1是消耗的材料，2保护材料，3清洗材料, id:物品的ID  如果是类型是金钱 则表示金钱类型0绑定金币 1金币 2绑定元宝 3元宝, count:数量}
	...
}
--]]
function SendConsumesToClient(sysarg, eqtype, consumes)
	local npack = DataPack.allocPacket(sysarg, 8, 15)
	if not npack then return false end
	DataPack.writeByte(npack, eqtype)
	local count = table.getn(consumes)
	DataPack.writeByte(npack, count)
	for k, v in pairs(consumes) do
		-- print("type:"..v.type)
		-- print("id:"..v.id)
		-- print("count:"..v.count)
		DataPack.writeByte(npack, v.type)
		DataPack.writeInt(npack, v.id)
		DataPack.writeInt(npack, v.count)
		local usetype = v.usetype or 0
		DataPack.writeByte(npack, usetype)
	end
	DataPack.flush(npack)
	return true
end