--#ifndef _MONSTER_ATTACKED_DISPATCHER_INCLUDED_
--#define _MONSTER_ATTACKED_DISPATCHER_INCLUDED_

--怪物被攻击的时候触发的脚本在这里派发
--需要处理怪物被攻击逻辑的将函数注册在这里
local MonAttackedDispatcher = {}

MonAttackedDispatcher.register = function (monId, proc)
  if not proc then
    print("MonAttackedDispatcher.register proc is nil with monId "..monId)
  end
  monId = tonumber(monId)
  local i
  local callTable = MonAttackedDispatcher[monId]
  if not callTable or type(callTable) ~= "table" then
    MonAttackedDispatcher[monId] = {}
	--注册怪物被攻击的时候触发脚本
	System.registerMonsterAttacked(monId, true)
  else
    for i = 1, #callTable do
      if callTable[i] == proc then
        return false
      end
    end
  end
  --这里不能用局部table插入，否则不会修改到MonAttackedDispatcher中
  table.insert(MonAttackedDispatcher[monId], proc)
  return true
end

MonAttackedDispatcher.unregister = function (monId, proc)  
  monId = tonumber(monId)   
  local i
  local callTable = MonAttackedDispatcher[monId]
  for i = 1, #callTable do
    if callTable[i] == proc then
      --这里不能从局部table中删除，否则不会修改到MonAttackedDispatcher中
      table.remove(MonAttackedDispatcher[monId], i)
      return true
    end
  end
  return false
end

MonAttackedDispatcher.dispatch = function (monster, sysarg, monId, damage) 
	for k, v in ipairs(MonAttackedDispatcher[monId] or {}) do
		v(monster, sysarg, monId, damage)
	end
end

--#endif //_MONSTER_ATTACKED_DISPATCHER_INCLUDED_