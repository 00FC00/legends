--[[
血脉系统功能实现。
梁凡 2015-9-15 
]]
--#include "data\config\Blood\BloodConfig.txt"
local BloodHandleTable = {}

EventCallDispatcher.BloodSystemHandle = function (sysarg, args)
  --print("args"..args[1])
  if args[1] == nil then return end   --第1个参数 1 表示升阶
  local func = BloodHandleTable[args[1]]
  if func ~= nil then
    func(sysarg, args)
  end
end

--血脉提升 
BloodHandleTable[1] = function(sysarg,args)
  --print("xxxxxx"..(#BloodConfig.BloodInclude))
  local UseGold = tonumber(args[2])
  local nGrade = Actor.getIntProperty( sysarg, PROP_ACTOR_XMGRADE)--当前血脉的阶段
  local nStar = Actor.getIntProperty( sysarg, PROP_ACTOR_XMSTAR)--当前血脉的星级
  local nExp = Actor.getIntProperty( sysarg, PROP_ACTOR_XMEXP)--当前血脉的经验 
  --print("nExp"..nExp)
  local Config = {}--物品配置表 
  if (nGrade >= (#BloodConfig.BloodInclude)) then
     if (nStar >= (#BloodConfig.BloodInclude[nGrade].UpStarNeed - 1)) and (nExp >= BloodConfig.BloodInclude[nGrade].UpStarNeed[nStar+1].MaxExp) then --检测是否满阶满星 
        Actor.sendTipmsg(sysarg, Lang.Blood.t00003, ttFlyTip)
        CallBloodClientErro(sysarg, 1, -1)
        return
     end
  end
  --print("nStar"..nStar)
  Config = BloodConfig.BloodInclude[nGrade].UpStarNeed[nStar + 1]
  if not Config then
     Actor.sendTipmsg(sysarg, Lang.Blood.t00003, ttFlyTip)
     CallBloodClientErro(sysarg, 1, -5)
     return
  end  
  --检测材料是否做够 
  if not CheckQuest(sysarg, Config, UseGold) then
     return
  end    
  --扣除材料 
  if not DesConsume(sysarg, Config, UseGold) then
     return
  end 
  
  --给血脉增加经验
  AddBloodExp(sysarg, nGrade, nStar, nExp, Config)           
end

--检测材料扣除是否足够 
function CheckQuest(sysarg, Config, UseGold)
  --检测绑金 
  local nBindCoin = Actor.getIntProperty( sysarg, PROP_ACTOR_BIND_COIN )
  if (nBindCoin < Config.BindCoin) then
 	 Actor.sendTipmsg(sysarg, string.format(Lang.Blood.t00004, Config.BindCoin), ttFlyTip)
 	 CallBloodClientErro(sysarg, 1, -2)
     return false
  end
  --检测材料 
  local itemCount = Actor.getItemCount(sysarg, Config.ItemId)
  if itemCount < Config.ItemCount then
 	 local myGold = Actor.getIntProperty( sysarg, PROP_ACTOR_YUANBAO)
 	 --没有勾选元宝代替 
     if UseGold <= 0 then
		Actor.sendTipmsg(sysarg, string.format(Lang.Blood.t00006,Item.getItemName(Config.ItemId)), ttFlyTip)
        CallBloodClientErro(sysarg, 1, -3)
        return false
     else
        --勾选元宝代替 
        if myGold < Config.PayGold then
           CallBloodClientErro(sysarg, 1, -4)
       	   Actor.sendTipmsg(sysarg, string.format(Lang.Blood.t00005, Config.PayGold), ttFlyTip)
           return false
        end
     end 
  end
  return true
end 

--扣除材料
function DesConsume(sysarg, Config, UseGold)
 --扣除金币 
  if not Actor.changeMoney(sysarg, mtBindCoin, -Config.BindCoin, 993, Lang.Blood.t00002) then
     CallBloodClientErro(sysarg, 1, -2)
	 return false
  end
  --扣除物品 
  local remCount = Actor.removeItem(sysarg, Config.ItemId, Config.ItemCount, -1, -1, -1, string.format(Lang.LogTips.l00163,Item.getItemName(Config.ItemId)), 993)
  if remCount < Config.ItemCount then
     if UseGold == 0 then
		CallBloodClientErro(sysarg, 1, -3)
		return false
     end
     if not Actor.changeMoney(sysarg, mtYuanbao, -Config.PayGold, 993, Lang.Blood.t00002) then
	 	CallBloodClientErro(sysarg, 1, -4)
        return false
     end
  end
  return true
end 

--给血脉增加经验
function AddBloodExp(sysarg, nGrade, nStar, nExp, Config)
  --print("nGrade"..nGrade)
  --print("nStar"..nStar)
  --print("nExp"..nExp)
  local Award = math.random(Config.AwardMinExp, Config.AwardMaxExp)
  local currExp = Award + nExp
  local subsysid = 1
  if currExp < Config.MaxExp then
     Actor.setUIntProperty(sysarg, PROP_ACTOR_XMEXP, currExp) 
     CallBloodClientErro(sysarg, subsysid, 1)
  else
     if (nGrade >= #BloodConfig.BloodInclude) and (nStar >= (#BloodConfig.BloodInclude[nGrade].UpStarNeed- 1)) then
        Actor.setUIntProperty(sysarg, PROP_ACTOR_XMEXP, Config.MaxExp)
     else
        Actor.setUIntProperty(sysarg, PROP_ACTOR_XMEXP, currExp - Config.MaxExp)
     end
     if (nStar >= (#BloodConfig.BloodInclude[nGrade].UpStarNeed - 1)) then  --满星升阶 
        if nGrade < #BloodConfig.BloodInclude then
           Actor.setUIntProperty(sysarg, PROP_ACTOR_XMGRADE, nGrade + 1)
           Actor.setUIntProperty(sysarg, PROP_ACTOR_XMSTAR, 0)
           CallBloodClientErro(sysarg, subsysid, 1)
        end
     else --升星 
        Actor.setUIntProperty(sysarg, PROP_ACTOR_XMSTAR, nStar + 1)
        CallBloodClientErro(sysarg, subsysid, 1)
     end
     TriggerBloodLevel(sysarg)
    --立即刷新 
    Actor.collectOperate(sysarg,0)
  end 
  local nNewGrade = Actor.getIntProperty( sysarg, PROP_ACTOR_XMGRADE)--当前血脉的阶段
  local nNewStar = Actor.getIntProperty( sysarg, PROP_ACTOR_XMSTAR)--当前血脉的星级 
  if (nNewGrade > nGrade) or (nNewStar > nStar ) then
	local str2 = string.format(Lang.Blood.t00008,Actor.getName(sysarg), nNewGrade, nNewStar)
	System.broadcastTipmsg(str2,2+128)
  end    
  Actor.collectOperate(sysarg,0)
end

----血脉升星或者升阶任务回调
function TriggerBloodLevel(sysarg)
  local nGrade = Actor.getIntProperty( sysarg, PROP_ACTOR_XMGRADE)--当前血脉的阶段
  local nStar = Actor.getIntProperty( sysarg, PROP_ACTOR_XMSTAR)--当前血脉的星级
  local Level = nGrade*100 + nStar
  Actor.triggerQuestEvent(sysarg, 48, Level, 0)
end

--通知客户端的错误码
function CallBloodClientErro(sysarg, subsysid, code)
   local code = tonumber(code)
   local subsysid = tonumber(subsysid)
   local Data = DataPack.allocPacket( sysarg, 63, subsysid)
   DataPack.writeByte(Data,code)
   DataPack.flush(Data)
end 


EventCallDispatcher.registerEventCall(BaseTypes.ActorEventId.aeBloodSystem, EventCallDispatcher.BloodSystemHandle)